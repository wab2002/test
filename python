import pygame, time, random

_display = pygame.display
Color_Black = pygame.Color(0, 0, 0)
Color_RED = pygame.Color(255, 0, 0)


class MainGame():
    # 创建窗口
    window = None
    SCREEN_HEIGHT = 500
    SCREEN_WIDTH = 800

    Tank_p1 = None
    EnemyTank_list = []
    EnemyTank_count = 5

    #存储我方子弹的列表
    bullet_list = []

    #存储敌方坦克子弹列表
    enemyBullet_list = []

    #爆炸效果列表
    explode_list = []

    #墙壁列表
    wall_list = []

    # 开始游戏
    def startgame(self):
        _display.init()
        # 加载窗口（借鉴官方文档）
        MainGame.window = _display.set_mode([MainGame.SCREEN_WIDTH, MainGame.SCREEN_HEIGHT])

        # 创建我方坦克(位置)
        self.createMyTank()

        #创建敌方坦克
        self.createEnemyTank()

        #创建墙壁
        self.createWalls()

        # 设置游戏标题
        _display.set_caption("坦克大战")
        # 持续刷新窗口
        while True:
            # 给窗口完成一个填充颜色
            MainGame.window.fill(Color_Black)
            # 在循环中持续完成事件的获取
            self.getEvent()
            # 获取左上角文字(位置)
            MainGame.window.blit(self.getTextSurface("敌方坦克剩余数量：{0}".format(len(MainGame.EnemyTank_list))), (5, 5))

            #调用展示墙壁的方法
            self.blitWalls()

            if MainGame.Tank_p1 and MainGame.Tank_p1.live:
                # 将我方坦克加入到窗口
                MainGame.Tank_p1.displayTank()
            else:
                del MainGame.Tank_p1
                MainGame.Tank_p1 = None

            # 将敌方坦克加入到窗口
            self.blitEnemyTank()

            #调用坦克移动方法
            if MainGame.Tank_p1 and not MainGame.Tank_p1.stop:
                MainGame.Tank_p1.move()
                MainGame.Tank_p1.hitWalls()
                MainGame.Tank_p1.hitEnemyTank()

            #渲染子弹
            self.blitBullet()

            #渲染敌方子弹
            self.blitEnemyBullet()

            #调用展示爆炸效果的方法
            self.displayExplodes()

            time.sleep(0.02)
            # 窗口的刷新
            _display.update()

    #创建我方坦克
    def createMyTank(self):
        MainGame.Tank_p1 = MyTank(250, 300)

    #创建敌方坦克
    def createEnemyTank(self):

        top = 100

        for i in range(MainGame.EnemyTank_count):
            speed = random.randint(1, 6)
            left = random.randint(1, 7)
            eTank = EnemyTank(left * 100, top, speed)
            MainGame.EnemyTank_list.append(eTank)

    #创建墙壁
    def createWalls(self):
        for i in range(1, 6):
            wall = Wall(130*i, 240)
            MainGame.wall_list.append(wall)

    def blitWalls(self):
        for wall in  MainGame.wall_list:
            if wall.live == True:
                wall.displayWall()
            else:
                MainGame.wall_list.remove(wall)
    #将敌方坦克加入到窗口中
    def blitEnemyTank(self):
        for eTank in MainGame.EnemyTank_list:
            if eTank.live:
                eTank.displayTank()
                eTank.randMove()
                eTank.hitWalls()
                eTank.hitmytank()
                eBullet = eTank.shot()
                if eBullet:
                    MainGame.enemyBullet_list.append(eBullet)
            else :
                MainGame.EnemyTank_list.remove(eTank)

    #将我方子弹加入到窗口中
    def blitBullet(self):
        for bullet in MainGame.bullet_list:
            if bullet.live == True:
                bullet.displayBullet()
                bullet.bulletMove()

                #调用子弹与敌方坦克的碰撞方法
                bullet.hitEnemyTank()

                #调用子弹与墙壁碰撞的方法
                bullet.hitWalls()
            else:
                MainGame.bullet_list.remove(bullet)

    #将敌方子弹加入到窗口中
    def blitEnemyBullet(self):
        for ebullet in MainGame.enemyBullet_list:
            if ebullet.live == True:
                #展示敌方子弹
                ebullet.displayBullet()
                #让子弹移动
                ebullet.bulletMove()
                ebullet.hitWalls()
                if MainGame.Tank_p1 and MainGame.Tank_p1.live:
                    ebullet.hitMyTank()
            else:
                MainGame.enemyBullet_list.remove(ebullet)

    #新增展示爆炸效果方法
    def displayExplodes(self):
        for explode in MainGame.explode_list:
            if explode.live == True:
                explode.displayExplode()
            else:
                MainGame.explode_list.remove(explode)

    # 获取程序期间所有事件（鼠标、键盘）
    def getEvent(self):
        # 1.获取所有事件
        eventList = pygame.event.get()
        # 2.对事件进行判断处理（1. 点击关闭按钮 2. 按下键盘某个按键）
        for event in eventList:
            # 判断事件类型是否 QUIT ，如果是退出的话，直接调用程序退出方法
            if event.type == pygame.QUIT:
                self.endgame()
            # 判断事件类型是否为按键按下，如果是，则继续判断按键是哪一个按键，来进行对应的处理
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE and not MainGame.Tank_p1:
                    self.createMyTank()
                if MainGame.Tank_p1 and MainGame.Tank_p1.live:
                    # 具体是哪一个按键的处理
                    if event.key == pygame.K_LEFT:
                        print("左")
                        # 改变坦克方向并移动
                        MainGame.Tank_p1.direction = "L"
                        MainGame.Tank_p1.stop = False
                        # MainGame.Tank_p1.move()
                    if event.key == pygame.K_RIGHT:
                        print("右")
                        # 改变坦克方向并移动
                        MainGame.Tank_p1.direction = "R"
                        MainGame.Tank_p1.stop = False
                        # MainGame.Tank_p1.move()
                    if event.key == pygame.K_UP:
                        print("上")
                        # 改变坦克方向并移动
                        MainGame.Tank_p1.direction = "U"
                        MainGame.Tank_p1.stop = False
                        # MainGame.Tank_p1.move()
                    if event.key == pygame.K_DOWN:
                        print("下")
                        # 改变坦克方向并移动
                        MainGame.Tank_p1.direction = "D"
                        MainGame.Tank_p1.stop = False
                        # MainGame.Tank_p1.move()
                    elif event.key == pygame.K_SPACE:
                        print("子弹")

                        if len(MainGame.bullet_list) < 2:
                            # 产生一颗子弹
                            m = Bullet(MainGame.Tank_p1)
                            # 加入子弹列表
                            MainGame.bullet_list.append(m)


            #松开方向键，停止前进
            if event.type == pygame.KEYUP:
                #松开的是方向键，才能更改移动开关状态
                if event.key == pygame.K_UP or event.key == pygame.K_DOWN or event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:
                    if MainGame.Tank_p1 and MainGame.Tank_p1.live:
                        #默认为False
                        MainGame.Tank_p1.stop = True

    # 左上角文字绘制的功能
    def getTextSurface(self, text):
        # 初始化字体模块
        pygame.font.init()
        # 查看系统支持的所有字体
        # FontList = pygame.font.get_fonts()
        # print(FontList)
        # 选中一个合适的字体
        font = pygame.font.SysFont("kaiti", 18)
        # 使用对应的字符完成相关内容的绘制
        textSurface = font.render(text, True, Color_RED)
        return textSurface

    # 结束游戏
    def endgame(self):
        print("谢谢使用！")
        exit()

class BaseItem(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)


class Tank(BaseItem):
    def __init__(self, left, top):
        self.images = {
            "U": pygame.image.load("images/P_U.png"),
            "D": pygame.image.load("images/P_D.png"),
            "L": pygame.image.load("images/P_L.png"),
            "R": pygame.image.load("images/P_R.png")
        }
        # 坦克/图片方向
        self.direction = "U"
        self.image = self.images[self.direction]

        # 坦克所在的区域
        self.rect = self.image.get_rect()

        # 指定坦克初始化位置
        self.rect.left = left
        self.rect.top = top

        # 坦克移动速度
        self.speed = 3

        #新增属性，坦克的移动开关
        self.stop = True

        #新增属性，坦克状态
        self.live = True

        #新增属性，记录坦克移动前的位置
        self.oldLeft = self.rect.left
        self.oldTop = self.rect.top

    # 坦克的移动方法
    def move(self):
        #记录移动之前的坐标
        self.oldLeft = self.rect.left
        self.oldTop = self.rect.top
        if self.direction == "L":
            if self.rect.left > 0:
                self.rect.left -= self.speed
        elif self.direction == "R":
            if self.rect.left < 750:
                self.rect.left += self.speed
        elif self.direction == "U":
            if self.rect.top > 0:
                self.rect.top -= self.speed
        elif self.direction == "D":
            if self.rect.top < 450:
                self.rect.top += self.speed

    def stay(self):
        self.rect.left = self.oldLeft
        self.rect.top = self.oldTop

    #新增坦克碰撞墙壁方法
    def hitWalls(self):
        for wall in MainGame.wall_list:
            if pygame.sprite.collide_rect(wall, self):
                self.stay()

    #坦克的射击方法
    def shot(self):
        return Bullet(self)

    # 坦克的展示方法
    def displayTank(self):
        # 重新设置坦克的图片
        self.image = self.images[self.direction]
        # 将坦克加入到窗口中
        MainGame.window.blit(self.image, self.rect)


class MyTank(Tank):
    def __init__(self, left, top):
        super(MyTank, self).__init__(left, top)
    def hitEnemyTank(self):
        for Etank in MainGame.EnemyTank_list:
            if pygame.sprite.collide_rect(self, Etank):
                self.stay()


class EnemyTank(Tank):
    def __init__(self, left, top, speed):
        super(EnemyTank, self).__init__(left, top)
        #图片集
        self.images = {
            "U": pygame.image.load("images/U.png"),
            "D": pygame.image.load("images/D.png"),
            "L": pygame.image.load("images/L.png"),
            "R": pygame.image.load("images/R.png")
        }
        # 坦克/图片方向
        self.direction = self.randDirection()
        self.image = self.images[self.direction]

        # 坦克所在的区域
        self.rect = self.image.get_rect()

        # 指定坦克初始化位置
        self.rect.left = left
        self.rect.top = top

        # 坦克移动速度
        self.speed = 1

        # 新增属性，坦克的移动开关
        self.stop = True

        #新增步数属性，控制敌方坦克移动
        self.step = 40

    def shot(self):
        num = random.randint(1, 50)
        if num == 1:
            return Bullet(self)


    def randDirection(self):
        num = random.randint(1,4)
        if num == 1:
            return "U"
        elif num == 2:
            return "D"
        elif num == 3:
            return "L"
        else:
            return "R"

    #随机移动
    def randMove(self):
        if self.step < 0:
            self.direction = self.randDirection()
            self.step = 40
        else:
            self.move()
            self.step -= 1

    def hitmytank(self):
        if MainGame.Tank_p1 :
            if pygame.sprite.collide_rect(self, MainGame.Tank_p1):
                self.stay()

    #def displayEnemyTank(self):
       # super.displayTank()

class Bullet(BaseItem):
    def __init__(self, tank):
        #图片
        self.image = pygame.image.load("images/bullet.png")
        #方向（取决于坦克方向）
        self.dirction = tank.direction
        #位置
        self.rect = self.image.get_rect()
        if self.dirction == "U":
            self.rect.left = tank.rect.left + 20
            self.rect.top = tank.rect.top -10
        if self.dirction == "D":
            self.rect.left = tank.rect.left + 20
            self.rect.top = tank.rect.top + 50
        if self.dirction == "L":
            self.rect.left = tank.rect.left - 10
            self.rect.top = tank.rect.top + 20
        if self.dirction == "R":
            self.rect.left = tank.rect.left + 50
            self.rect.top = tank.rect.top +20
        #速度
        self.speed = 7

        #子弹状态
        self.live = True

    # 子弹的移动方法
    def bulletMove(self):
        if self.dirction == "U":
            if self.rect.top > 0 :
                self.rect.top -= self.speed
            else:
                self.live = False
        elif self.dirction == "D":
            if self.rect.top < MainGame.SCREEN_HEIGHT - self.rect.height:
                self.rect.top += self.speed
            else:
                self.live = False
        elif self.dirction == "R":
            if self.rect.left < MainGame.SCREEN_WIDTH - self.rect.width:
                self.rect.left += self.speed
            else:
                self.live = False
        elif self.dirction == "L":
            if self.rect.left > 0 :
                self.rect.left -= self.speed
            else:
                self.live = False

    # 展示子弹的方法
    def displayBullet(self):
        MainGame.window.blit(self.image, self.rect)

    #新增我方子弹碰撞敌方坦克的方法
    def hitEnemyTank(self):
        for eTank in MainGame.EnemyTank_list:
            if pygame.sprite.collide_rect(self, eTank):
                explode = Explode(eTank)
                MainGame.explode_list.append(explode)
                self.live = False
                eTank.live = False

    #新增敌方子弹与我方坦克的碰撞
    def hitMyTank(self):
        if pygame.sprite.collide_rect(self, MainGame.Tank_p1):
            explode = Explode(MainGame.Tank_p1)
            MainGame.explode_list.append(explode)
            self.live = False
            MainGame.Tank_p1.live = False

    #新增子弹碰撞墙壁方法
    def hitWalls(self):
        for wall in MainGame.wall_list:
            if pygame.sprite.collide_rect(wall, self):
                self.live = False
                wall.hp -= 1
                if wall.hp <=0:
                    wall.live = False

class Explode():
    def __init__(self, tank):
        self.rect = tank.rect
        self.step = 0
        self.images = [
            pygame.image.load("images/explode.jpg"),
            pygame.image.load("images/explode.jpg"),
            pygame.image.load("images/explode.jpg"),
            pygame.image.load("images/explode.jpg"),
            pygame.image.load("images/explode.jpg")
        ]
        self.image = self.images[self.step]
        self.live = True
    # 展示爆炸效果的方法
    def displayExplode(self):
        if self.step < len(self.images):
            MainGame.window.blit(self.image, self.rect)
            self.step +=1
        else:
            self.live = False
            self.step = 0



class Wall():
    def __init__(self, left, top):
        self.image = pygame.image.load("images/ice.png")
        self.rect = self.image.get_rect()
        self.rect.top = top
        self.rect.left = left
        #用来决定墙壁是否应该在窗口中展示
        self.live = True
        #用来记录墙壁的生命值
        self.hp = 3


    # 展示墙壁的方法
    def displayWall(self):
        MainGame.window.blit(self.image, self.rect)


class Music():
    def __init__(self):
        pass

    # 播放音乐的方法
    def play(self):
        pass


MainGame().startgame()

